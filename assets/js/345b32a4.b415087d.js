"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2882],{7850:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>f,frontMatter:()=>l,metadata:()=>s,toc:()=>g});var o=t(7462),r=(t(7294),t(3905)),i=t(2004);const l={},a="Triggering Flows Based on Other Flows",s={unversionedId:"production/event-triggering/flow-events",id:"production/event-triggering/flow-events",title:"Triggering Flows Based on Other Flows",description:"Besides triggering flows based on external events, you can trigger a flow when",source:"@site/docs/production/event-triggering/flow-events.md",sourceDirName:"production/event-triggering",slug:"/production/event-triggering/flow-events",permalink:"/production/event-triggering/flow-events",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/production/event-triggering/flow-events.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Triggering Flows Based on External Events",permalink:"/production/event-triggering/external-events"},next:{title:"Inspecting Events",permalink:"/production/event-triggering/inspect-events"}},p={},g=[{value:"Triggering based on multiple flows",id:"triggering-based-on-multiple-flows",level:3},{value:"Passing data across flows",id:"passing-data-across-flows",level:2},{value:"Testing flow triggering locally",id:"testing-flow-triggering-locally",level:2}],d={toc:g};function f(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"triggering-flows-based-on-other-flows"},"Triggering Flows Based on Other Flows"),(0,r.kt)("p",null,"Besides triggering flows based on external events, you can trigger a flow when\nanother flow completes. Metaflow provides a special decorator to support the\npattern, ",(0,r.kt)("a",{parentName:"p",href:"/api/flow-decorators/trigger_on_finish"},(0,r.kt)("inlineCode",{parentName:"a"},"@trigger_on_finish")),", which\nallows you to build arbitrarily complex systems of interconnected flows."),(0,r.kt)("p",null,"Here, the completion of ",(0,r.kt)("inlineCode",{parentName:"p"},"FirstFlow")," triggers a run of ",(0,r.kt)("inlineCode",{parentName:"p"},"SecondFlow"),":"),(0,r.kt)(i.Z,{playsinline:!0,playing:!0,controls:!0,muted:!0,loop:!0,url:"/assets/et-flows.mp4",width:"100%",height:"100%",mdxType:"ReactPlayer"}),(0,r.kt)("p",null,"Let's demonstrate the case with two simple flows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step\n\nclass FirstFlow(FlowSpec):\n\n    @step\n    def start(self):\n        print(\"This is the first flow\")\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == '__main__':\n    FirstFlow()\n")),(0,r.kt)("p",null,"and "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step, trigger_on_finish\n\n@trigger_on_finish(flow='FirstFlow')\nclass SecondFlow(FlowSpec):\n\n    @step\n    def start(self):\n        print(\"This is the second flow\")\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == '__main__':\n    SecondFlow()\n")),(0,r.kt)("p",null,"Deploy both the flows on Argo Workflows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python firstflow.py argo-workflows create\npython secondflow.py argo-workflows create\n")),(0,r.kt)("p",null,"Since we didn't specify a trigger or ",(0,r.kt)("inlineCode",{parentName:"p"},"@schedule")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"FirstFlow"),", we must start it manually:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python firstflow.py argo-workflows trigger\n")),(0,r.kt)("p",null,"After ",(0,r.kt)("inlineCode",{parentName:"p"},"FirstFlow")," completes, you should see ",(0,r.kt)("inlineCode",{parentName:"p"},"SecondFlow")," starting automatically."),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"You can create infinite loops with ",(0,r.kt)("inlineCode",{parentName:"p"},"@trigger_on_finish"),". For instance, if you\nspecify ",(0,r.kt)("inlineCode",{parentName:"p"},"@trigger_on_finish(flow='SecondFlow')")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"FirstFlow")," above, the\nflows will trigger each other infinitely, consuming resources on the cluster.\nIf this happens, you can open the Argo Workflows UI and delete the workflow.")),(0,r.kt)("h3",{id:"triggering-based-on-multiple-flows"},"Triggering based on multiple flows"),(0,r.kt)("p",null,"You can also depend on multiple flows completing before starting a flow. Simply define a list of flows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@trigger_on_finish(flows=['FirstFlow', 'AnotherFlow'])\n")),(0,r.kt)("p",null,"all of the flows need to complete within a configured time windows for the flow to trigger."),(0,r.kt)("h2",{id:"passing-data-across-flows"},"Passing data across flows"),(0,r.kt)("p",null,"Consider an extension of ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelRefreshFlow")," that was featured\n",(0,r.kt)("a",{parentName:"p",href:"/production/event-triggering/external-events#passing-parameters-in-events"},"on the previous\npage"),".\nThis time, we want to use the newly trained model to run inference for the\nlatest data. This requires passing the model object from ",(0,r.kt)("inlineCode",{parentName:"p"},"TrainingFlow")," to\n",(0,r.kt)("inlineCode",{parentName:"p"},"InferenceFlow"),":"),(0,r.kt)(i.Z,{playsinline:!0,playing:!0,controls:!0,muted:!0,loop:!0,url:"/assets/et-combo.mp4",width:"100%",height:"100%",mdxType:"ReactPlayer"}),(0,r.kt)("p",null,"Whenever a flow is triggered by an event, information about the event is made\navailable through\n",(0,r.kt)("a",{parentName:"p",href:"/api/client#metaflowtrigger"},"the ",(0,r.kt)("inlineCode",{parentName:"a"},"MetaflowTrigger"),"object"),"\nthat is accessible at ",(0,r.kt)("inlineCode",{parentName:"p"},"current.trigger"),". See the\nAPI documentation for ",(0,r.kt)("a",{parentName:"p",href:"/api/client#metaflowevent"},(0,r.kt)("inlineCode",{parentName:"a"},"MetaflowEvent")," for all available event-related\nmetadata"),"."),(0,r.kt)("p",null,"When using ",(0,r.kt)("inlineCode",{parentName:"p"},"@trigger_on_finish"),", you can access information about the triggering\nruns through\n",(0,r.kt)("a",{parentName:"p",href:"/api/current#trigger-and-trigger_on_finish"},(0,r.kt)("inlineCode",{parentName:"a"},"current.trigger.run"))," or\n",(0,r.kt)("a",{parentName:"p",href:"/api/current#trigger-and-trigger_on_finish"},(0,r.kt)("inlineCode",{parentName:"a"},"current.trigger.runs"))," in\nthe case of multiple flows, which return one or more\n",(0,r.kt)("a",{parentName:"p",href:"/metaflow/client#properties-related-to-runs"},(0,r.kt)("inlineCode",{parentName:"a"},"Run")," objects"),". Use the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Run")," object to access artifacts as you do when\n",(0,r.kt)("a",{parentName:"p",href:"/metaflow/client"},"using the Client API directly"),"."),(0,r.kt)("p",null,"In this example, we access the ",(0,r.kt)("inlineCode",{parentName:"p"},"model")," artifact created in ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelRefreshFlow"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step, trigger_on_finish, current\n\n@trigger_on_finish(flow='ModelRefreshFlow')\nclass InferenceFlow(FlowSpec):\n\n    @step\n    def start(self):\n        print(\"Triggering run\", current.trigger.run)\n        self.model = current.trigger.run.data.model\n        print('Model', self.model)\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == '__main__':\n    InferenceFlow()\n")),(0,r.kt)("h2",{id:"testing-flow-triggering-locally"},"Testing flow triggering locally"),(0,r.kt)("p",null,"You may have noticed one issue with ",(0,r.kt)("inlineCode",{parentName:"p"},"InferenceFlow")," above. If you ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," it\nlocally, it will fail as ",(0,r.kt)("inlineCode",{parentName:"p"},"current.trigger")," is not defined. Obviously, it would\nbe convenient to be able to test the flow before deploying to Argo Workflows."),(0,r.kt)("p",null,"During development, you can manually assign the triggering run on the command line:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python inferenceflow.py --trigger ModelRefreshFlow/233 run\n")),(0,r.kt)("p",null,"This will run the flow as if it was triggered by a run ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelRefreshFlow/233"),".\nThis allows you to quickly iterate on the flow locally, testing it with\ndifferent upstream data providers."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"In order for the trigger to succeed, the run ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelRefreshFlow/233")," must be an actual run that exists.\nMetaflow will raise an error if a nonexistent run is specified.")))}f.isMDXComponent=!0}}]);