"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9718],{25:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>g});var i=n(7462),r=(n(7294),n(3905)),a=n(2004);const o={},l="Inspecting Events",s={unversionedId:"production/event-triggering/inspect-events",id:"production/event-triggering/inspect-events",title:"Inspecting Events",description:"Events provide an additional layer of observability in production systems. By",source:"@site/docs/production/event-triggering/inspect-events.md",sourceDirName:"production/event-triggering",slug:"/production/event-triggering/inspect-events",permalink:"/production/event-triggering/inspect-events",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/production/event-triggering/inspect-events.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Triggering Flows Based on Other Flows",permalink:"/production/event-triggering/flow-events"},next:{title:"Deploying Variants of Event-Triggered Flows",permalink:"/production/event-triggering/project-events"}},p={},g=[{value:"Accessing events through Client API",id:"accessing-events-through-client-api",level:2},{value:"Dealing with multiple triggers",id:"dealing-with-multiple-triggers",level:3},{value:"Following a trail of runs",id:"following-a-trail-of-runs",level:3},{value:"Events in the Metaflow UI",id:"events-in-the-metaflow-ui",level:2}],c={toc:g};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"inspecting-events"},"Inspecting Events"),(0,r.kt)("p",null,"Events provide an additional layer of observability in production systems. By\nfollowing a trail of events, you can inspect what was triggered, when, and by\nwhom."),(0,r.kt)("h2",{id:"accessing-events-through-client-api"},"Accessing events through Client API"),(0,r.kt)("p",null,"You can inspect the event(s) with the Client API that exposes\n",(0,r.kt)("a",{parentName:"p",href:"/api/client#metaflowtrigger"},"the ",(0,r.kt)("inlineCode",{parentName:"a"},"MetaflowTrigger")," object")," for every\nevent-triggered run. For instance, we can inspect the event that triggered a\nproduction run ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelRefreshFlow/argo-modelrefreshflow-rlpgc"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import namespace, Run\nnamespace(None)\nRun('ModelRefreshFlow/argo-modelrefreshflow-rlpgc').trigger.event\n")),(0,r.kt)("p",null,"Remember that ",(0,r.kt)("inlineCode",{parentName:"p"},"namespace(None)")," sets\n",(0,r.kt)("a",{parentName:"p",href:"/scaling/tagging#global-namespace"},"the global namespace")," which is\nrequired to inspect production runs e.g. in a notebook. This will print\nout metadata about the event:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MetaflowEvent(name='data_updated',\n              id='ca75a1a4-91de-40c2-944c-0b39436c721e',\n              timestamp=datetime.datetime(2023, 5, 15, 19, 50, 43),\n              type='event')\n")),(0,r.kt)("p",null,"Find a description of all fields in ",(0,r.kt)("a",{parentName:"p",href:"#"},"the related API documentation"),"."),(0,r.kt)("h3",{id:"dealing-with-multiple-triggers"},"Dealing with multiple triggers"),(0,r.kt)("p",null,"If a run was triggered by multiple events, you can ",(0,r.kt)("a",{parentName:"p",href:"/api/client#Trigger.__getitem__"},"inspect specific\n",(0,r.kt)("inlineCode",{parentName:"a"},"MetaflowEvent")," by name"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"run.trigger['data_updated'].name\n")),(0,r.kt)("p",null,"Or, if a run was triggered by multiple flows when using ",(0,r.kt)("inlineCode",{parentName:"p"},"@trigger_on_finish"),",\nyou can inspect a specific triggering ",(0,r.kt)("inlineCode",{parentName:"p"},"Run")," by its flow name:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"run.trigger['FirstFlow'].data.model\n")),(0,r.kt)("h3",{id:"following-a-trail-of-runs"},"Following a trail of runs"),(0,r.kt)("p",null,"When flows are connected with ",(0,r.kt)("inlineCode",{parentName:"p"},"@trigger_on_finish"),", you can use\n",(0,r.kt)("inlineCode",{parentName:"p"},"MetaflowTrigger")," to follow a chain of triggered runs. Consider this chain of\nflows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ETLFlow \u2192 TrainingFlow \u2192 PredictionFlow\n")),(0,r.kt)("p",null,"We can walk backwards from the latest run of ",(0,r.kt)("inlineCode",{parentName:"p"},"PredictionFlow")," back to the\ntriggering run of ",(0,r.kt)("inlineCode",{parentName:"p"},"ETLFlow"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"etl_run = Flow('PredictionFlow').latest_run.trigger.run.trigger.run\n")),(0,r.kt)("h2",{id:"events-in-the-metaflow-ui"},"Events in the Metaflow UI"),(0,r.kt)("p",null,"If you have deployed\n",(0,r.kt)("a",{parentName:"p",href:"https://netflixtechblog.com/open-sourcing-a-monitoring-gui-for-metaflow-75ff465f0d60"},"the Metaflow\nGUI"),",\nyou can view metadata about triggers right in the UI. The circles with arrows\ninside indicate event-triggered runs:"),(0,r.kt)(a.Z,{playsinline:!0,playing:!0,controls:!0,muted:!0,loop:!0,url:"/assets/mfgui-event.mp4",width:"100%",height:"100%",mdxType:"ReactPlayer"}))}d.isMDXComponent=!0}}]);