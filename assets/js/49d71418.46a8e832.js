"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8349],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(a),u=i,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||l;return a?n.createElement(h,r(r({ref:t},c),{},{components:a})):n.createElement(h,r({ref:t},c))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9973:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));const l={},r="Inspecting Flows and Results",o={unversionedId:"metaflow/client",id:"metaflow/client",title:"Inspecting Flows and Results",description:"Metaflow provides a client API that is used to inspect results of past runs. It is",source:"@site/docs/metaflow/client.md",sourceDirName:"metaflow",slug:"/metaflow/client",permalink:"/metaflow/client",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/metaflow/client.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Creating Flows",permalink:"/metaflow/basics"},next:{title:"Managing Flows in Notebooks and Scripts",permalink:"/metaflow/managing-flows/introduction"}},s={},p=[{value:"Object hierarchy",id:"object-hierarchy",level:2},{value:"Navigating the object hierarchy",id:"navigating-the-object-hierarchy",level:2},{value:"Listing children",id:"listing-children",level:3},{value:"Accessing a specific child",id:"accessing-a-specific-child",level:3},{value:"Accessing a specific object by its address",id:"accessing-a-specific-object-by-its-address",level:3},{value:"Accessing data",id:"accessing-data",level:3},{value:"Adding, removing, and replacing tags",id:"adding-removing-and-replacing-tags",level:3},{value:"System tags",id:"system-tags",level:4},{value:"Common properties",id:"common-properties",level:3},{value:"Properties related to flows",id:"properties-related-to-flows",level:3},{value:"Properties related to runs",id:"properties-related-to-runs",level:3},{value:"Properties related to steps",id:"properties-related-to-steps",level:3},{value:"Properties related to tasks",id:"properties-related-to-tasks",level:3},{value:"Metadata provider",id:"metadata-provider",level:2}],c={toc:p};function d(e){let{components:t,...l}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"inspecting-flows-and-results"},"Inspecting Flows and Results"),(0,i.kt)("p",null,"Metaflow provides a client API that is used to inspect results of past runs. It is\nparticularly well suited to being used in notebooks. If you want to run flows in\nnotebooks or in other apps, see ",(0,i.kt)("a",{parentName:"p",href:"/metaflow/managing-flows/introduction"},"Managing Flows"),"."),(0,i.kt)("p",null,"This document provides an overview of the client API. See the complete API in ",(0,i.kt)("a",{parentName:"p",href:"/api/client"},"the\nClient API reference page"),"."),(0,i.kt)("h2",{id:"object-hierarchy"},"Object hierarchy"),(0,i.kt)("p",null,"Note that all operations in the Client API are filtered by the current namespace, as\nexplained in ",(0,i.kt)("a",{parentName:"p",href:"/scaling/tagging"},"Organizing Results"),". If you do not get the results\nyou expect, make sure you are in the correct namespace. The Client API consults the\nmetadata service to gather results, so make sure that the client is properly configured\nto use the correct ",(0,i.kt)("a",{parentName:"p",href:"/metaflow/client#metadata-provider"},"metadata provider"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Object hierarchy",src:a(9792).Z,width:"639",height:"370"})),(0,i.kt)("p",null,"You can import any of the objects shown above directly from the metaflow package as\nfollows (for example):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import Run\n")),(0,i.kt)("p",null,"The root object, ",(0,i.kt)("inlineCode",{parentName:"p"},"Metaflow"),", can be instantiated simply with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import Metaflow\nmf = Metaflow()\n")),(0,i.kt)("p",null,"This is the entry point to all other objects. For instance, you can list all flows that\nhave been run in the past with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import Metaflow\nprint(Metaflow().flows)\n")),(0,i.kt)("h2",{id:"navigating-the-object-hierarchy"},"Navigating the object hierarchy"),(0,i.kt)("p",null,"Every object listed above follows a consistent interface. All the operations below are\navailable in all objects, not just the ones demonstrated."),(0,i.kt)("h3",{id:"listing-children"},"Listing children"),(0,i.kt)("p",null,"You can list child objects of any parent object simply by iterating over the parent:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import Flow\nflow = Flow('HelloFlow')\nruns = list(flow)\n")),(0,i.kt)("p",null,"Expectedly, this works too:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import Flow\nflow = Flow('HelloFlow')\nfor run in flow:\n    print(run)\n")),(0,i.kt)("h3",{id:"accessing-a-specific-child"},"Accessing a specific child"),(0,i.kt)("p",null,"You can access a specific child with square brackets, similar to a key lookup in a\ndictionary. Note that keys are always strings (even if they are numerical IDs):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import Flow\nflow = Flow('HelloFlow')\nrun = flow['2']\n")),(0,i.kt)("h3",{id:"accessing-a-specific-object-by-its-address"},"Accessing a specific object by its address"),(0,i.kt)("p",null,"Besides navigating from the root downwards, you can instantiate every object directly\nwith its fully qualified name, called ",(0,i.kt)("inlineCode",{parentName:"p"},"pathspec"),". Note that also this operation is\nsubject to the current namespace, as explained in ",(0,i.kt)("a",{parentName:"p",href:"/scaling/tagging"},"Organizing\nResults"),"; in short, you will not be able to access a Flow that is\nnot the current namespace; the error message returned will make it clear whether an\nobject exists and is not in the namespace or does not exist at all."),(0,i.kt)("p",null,"You can instantiate, for example, a particular flow by its name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import Flow\nflow = Flow('HelloFlow')\n")),(0,i.kt)("p",null,"You can instantiate a particular run of a flow by its run id:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import Run\nrun = Run('HelloFlow/2')\n")),(0,i.kt)("p",null,"And every step in a run by its name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import Step\nstep = Step('HelloFlow/2/start')\n")),(0,i.kt)("h3",{id:"accessing-data"},"Accessing data"),(0,i.kt)("p",null,"One of the most typical use cases of the client API is to access data artifacts produced\nby runs. Each data artifact is represented by a ",(0,i.kt)("inlineCode",{parentName:"p"},"DataArtifact")," object whose parent is a\n",(0,i.kt)("inlineCode",{parentName:"p"},"Task"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DataArtifact")," is a container object for the actual value. Besides the value,\n",(0,i.kt)("inlineCode",{parentName:"p"},"DataArtifact")," includes metadata about the artifact, such as its time of creation."),(0,i.kt)("p",null,"Often you are only interested in the value of an artifact. For this typical use case we\nprovide a convenience property ",(0,i.kt)("inlineCode",{parentName:"p"},".data")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Task")," object. The ",(0,i.kt)("inlineCode",{parentName:"p"},".data")," property\nreturns a container which has all artifacts produced by the task as attributes."),(0,i.kt)("p",null,"For instance, this the shortest way to access a value produced by a step in a run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import Step\nprint(Step('DebugFlow/2/a').task.data.x)\n")),(0,i.kt)("p",null,"Here, we print the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"self.x")," in the step ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," of the run ",(0,i.kt)("inlineCode",{parentName:"p"},"2")," of the flow\n",(0,i.kt)("inlineCode",{parentName:"p"},"DebugFlow"),"."),(0,i.kt)("h3",{id:"adding-removing-and-replacing-tags"},"Adding, removing, and replacing tags"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"New in Metaflow 2.7.1: You need to upgrade your Metaflow library and the metadata\nservice to benefit from this feature.")),(0,i.kt)("p",null,"Every run has ",(0,i.kt)("a",{parentName:"p",href:"/scaling/tagging#tagging"},"a set of tags")," attached, that is,\nuser-defined annotations. You can add and remove tags as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import Run\nrun = Run('HelloFlow/2')\nrun.add_tag('one_tag') # add one tag\nrun.add_tags(['another_tag', 'yet_another', 'one_tag']) # add many tags\nprint(run.user_tags)\n")),(0,i.kt)("p",null,"This will print ",(0,i.kt)("inlineCode",{parentName:"p"},"one_tag"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"another_tag"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"yet_another"),". Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"one_tag")," is added\ntwice but since tags are a set, duplicates are ignored."),(0,i.kt)("p",null,"Removing works symmetrically:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import Run\nrun = Run('HelloFlow/2')\nrun.remove_tag('one_tag') # remove one tag\nrun.remove_tags(['another_tag', 'yet_another']) # remove many tags\n")),(0,i.kt)("p",null,"You can also replace tags with other tags:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import Run\nrun = Run('HelloFlow/2')\nrun.replace_tag('one_tag', 'better_tag')\nrun.replace_tags(['yet_another', 'another_tag'], ['better_tag'])\n")),(0,i.kt)("p",null,"The replace calls first removes the tags specified as the first argument and then adds\nthe tag(s) in the second argument. Crucially, this is guaranteed to be an ",(0,i.kt)("em",{parentName:"p"},"atomic\noperation"),": If another party lists the tags while replace is running, they won't see a\npartial state between remove and adds."),(0,i.kt)("p",null,"Note you can perform these operations also on the command line using the ",(0,i.kt)("inlineCode",{parentName:"p"},"tag")," command,\nfor instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"python helloflow.py tag add --run-id 2 one_tag\n")),(0,i.kt)("h4",{id:"system-tags"},"System tags"),(0,i.kt)("p",null,"In addition to user-defined tags, Metaflow assigns a handful of ",(0,i.kt)("em",{parentName:"p"},"system tags")," to runs\nautomatically. These tags can be used for filtering and organizing runs, but they can\nnot be removed or replaced with other tags."),(0,i.kt)("p",null,"You can see the set of system tags assigned to a run like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import Run\nprint(Run('HelloFlow/2').system_tags)\n")),(0,i.kt)("p",null,"Or the union of system tags and user-defined tags like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import Run\nprint(Run('HelloFlow/2').tags)\n")),(0,i.kt)("h3",{id:"common-properties"},"Common properties"),(0,i.kt)("p",null,"Every object has the following properties available:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user_tags"),": user-defined tags assigned to the object's run"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"system_tags"),": system-defined (immutable) tags assigned to the object's run"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tags"),": the union of ",(0,i.kt)("inlineCode",{parentName:"li"},"user_tags")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"system_tags")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"created_at"),": creation timestamp"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"parent"),": parent object"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pathspec"),": object fully qualified name"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"path_components"),": list containing the elements in ",(0,i.kt)("inlineCode",{parentName:"li"},"pathspec"))),(0,i.kt)("h3",{id:"properties-related-to-flows"},"Properties related to flows"),(0,i.kt)("p",null,"To access an iterator over runs and filter by tags, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"runs()")," method. See\n",(0,i.kt)("a",{parentName:"p",href:"/scaling/tagging#tagging"},"Tagging")," for more detail."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Flow")," has two additional properties related to determining the latest run for the flow.\nNote that any ",(0,i.kt)("inlineCode",{parentName:"p"},"Run")," returned will be in the current namespace."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"latest_run"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Run")," of the latest run (whether or not it has completed or has been\nsuccessful)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"latest_successful_run"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Run")," of the latest successful (and therefore completed) run.")),(0,i.kt)("h3",{id:"properties-related-to-runs"},"Properties related to runs"),(0,i.kt)("p",null,"To access an iterator over the steps of a run and filter by tags, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"steps()"),"\nmethod. See ",(0,i.kt)("a",{parentName:"p",href:"/scaling/tagging#tagging"},"Tagging")," for more detail."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Run")," also has a few additional properties to make it easy to access commonly used\ninformation:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"data"),": A quick way to access the ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," object of the end task of this run. In other\nwords, this is the quickest way to access the data produced at the end of the flow."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"successful"),": A boolean indicating whether or not the run completed successfully. Note\nthat this will return ",(0,i.kt)("inlineCode",{parentName:"li"},"False")," if the run has not completed (ie: is still in progress)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"finished"),": A boolean indicating whether or not the run completed. The returned value\nwill be ",(0,i.kt)("inlineCode",{parentName:"li"},"True")," whether or not the run was successful."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"finished_at"),": A datetime object indicating the completion time of the run. This will\nbe ",(0,i.kt)("inlineCode",{parentName:"li"},"None")," if the run has not completed"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"code"),": In certain circumstances, the code used for this run is saved and persisted;\nthis allows you to access this code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"end_task"),": A shortcut to the ",(0,i.kt)("inlineCode",{parentName:"li"},"Task")," object of the last step in the run."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"trigger"),": Information about event(s) that ",(0,i.kt)("a",{parentName:"li",href:"/production/event-triggering/inspect-events"},"triggered this run"),",\nif available.")),(0,i.kt)("h3",{id:"properties-related-to-steps"},"Properties related to steps"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Step")," typically has a single ",(0,i.kt)("inlineCode",{parentName:"p"},"Task"),". A Step will have multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"Task")," objects as its\nchildren if it is a ",(0,i.kt)("inlineCode",{parentName:"p"},"foreach")," step; each ",(0,i.kt)("inlineCode",{parentName:"p"},"Task")," will correspond to a single execution of\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"Step"),"."),(0,i.kt)("p",null,"To access an iterator over the tasks of a step and filter by tags, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"tasks()"),"\nmethod. See ",(0,i.kt)("a",{parentName:"p",href:"/scaling/tagging#tagging"},"Tagging")," for more detail."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Step")," has a few additional properties as well:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"task"),": Convenience method to return the unique ",(0,i.kt)("inlineCode",{parentName:"li"},"Task")," associated with this ",(0,i.kt)("inlineCode",{parentName:"li"},"Step"),". If\na ",(0,i.kt)("inlineCode",{parentName:"li"},"Step")," has more than one ",(0,i.kt)("inlineCode",{parentName:"li"},"Task"),", this will return any of them (no order guaranteed)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"finished_at"),": A datetime object indicating the completion time of the step. A step is\ncomplete when all its tasks are complete."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"environment_info"),": A dict object containing metadata for the execution environment.\nSee ",(0,i.kt)("a",{parentName:"li",href:"/scaling/dependencies/"},"Dependencies")," for more details.")),(0,i.kt)("h3",{id:"properties-related-to-tasks"},"Properties related to tasks"),(0,i.kt)("p",null,"Since a ",(0,i.kt)("inlineCode",{parentName:"p"},"Task")," is the actual unit of execution in Metaflow, these objects contain the\nrichest set of properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"data"),": A convenience method to access all data produced by this ",(0,i.kt)("inlineCode",{parentName:"li"},"Task"),". See\n",(0,i.kt)("a",{parentName:"li",href:"/metaflow/client#accessing-data"},"Accessing data"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"artifacts"),": A convenience method to access all ",(0,i.kt)("inlineCode",{parentName:"li"},"DataArtifact")," objects produced by\nthis ",(0,i.kt)("inlineCode",{parentName:"li"},"Task"),". See ",(0,i.kt)("a",{parentName:"li",href:"/metaflow/client#accessing-data"},"Accessing data"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"successful"),": A boolean indicating whether or not this ",(0,i.kt)("inlineCode",{parentName:"li"},"Task")," completed successfully."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"finished"),": A boolean indicating whether or not this ",(0,i.kt)("inlineCode",{parentName:"li"},"Task")," completed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"exception"),": If an exception was raised by this ",(0,i.kt)("inlineCode",{parentName:"li"},"Task")," (ie: it did not complete\nsuccessfully), it will be contained here."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"finished_at"),": A datetime object indicating the completion time of this ",(0,i.kt)("inlineCode",{parentName:"li"},"Task"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stdout"),": A string containing the standard output of this ",(0,i.kt)("inlineCode",{parentName:"li"},"Task"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stderr"),": A string containing the standard error of this ",(0,i.kt)("inlineCode",{parentName:"li"},"Task"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"code"),": The code used to execute this ",(0,i.kt)("inlineCode",{parentName:"li"},"Task"),", if available."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"environment_info"),": A dict object containing metadata for the execution environment.\nSee ",(0,i.kt)("a",{parentName:"li",href:"/scaling/dependencies/"},"Dependencies")," for more detail.")),(0,i.kt)("p",null,"Here is an example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import Step\nstep = Step('DebugFlow/2/a')\nif step.task.successful:\n    print(step.task.finished_at)\n")),(0,i.kt)("h2",{id:"metadata-provider"},"Metadata provider"),(0,i.kt)("p",null,"The Client API relies on a metadata service to gather results appropriately. Metaflow\nsupports a local mode (",(0,i.kt)("inlineCode",{parentName:"p"},".metaflow")," directory on your filesystem) and a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Netflix/metaflow-service"},"remote\nmode"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import get_metadata, metadata\n\n# Fetch currently configured metadata provider\nget_metadata()\n\n# Configure Client to use local metadata provider globally\nmetadata('/Users/bob/metaflow')\n\n# Configure Client to use remote metadata provider globally\nmetadata('https://localhost:5000/mymetaflowservice')\n")),(0,i.kt)("p",null,"Note that changing the metadata provider is a global operation and all subsequent client\noperations will use the metadata provider specified."))}d.isMDXComponent=!0},9792:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/hierarchy-aa136d8e279d276d816b3d826d50319c.png"}}]);