"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3659],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9200:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={},i="Structuring Projects",l={unversionedId:"scaling/dependencies/project-structure",id:"scaling/dependencies/project-structure",title:"Structuring Projects",description:"This page describes how to arrange files in your projects to",source:"@site/docs/scaling/dependencies/project-structure.md",sourceDirName:"scaling/dependencies",slug:"/scaling/dependencies/project-structure",permalink:"/scaling/dependencies/project-structure",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/scaling/dependencies/project-structure.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Managing Dependencies",permalink:"/scaling/dependencies/"},next:{title:"Managing Libraries",permalink:"/scaling/dependencies/libraries"}},s={},p=[{value:"Separating code to modules",id:"separating-code-to-modules",level:2},{value:"Separating code to packages",id:"separating-code-to-packages",level:2},{value:"Common packages shared across flows",id:"common-packages-shared-across-flows",level:2},{value:"Using common packages from other Git repositories",id:"using-common-packages-from-other-git-repositories",level:3},{value:"Non-Python dependencies",id:"non-python-dependencies",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"structuring-projects"},"Structuring Projects"),(0,o.kt)("p",null,"This page describes how to arrange files in your projects to\nfollow software development best practices, which also leads to\n",(0,o.kt)("a",{parentName:"p",href:"/scaling/remote-tasks/requesting-resources"},"easy remote execution"),"."),(0,o.kt)("h2",{id:"separating-code-to-modules"},"Separating code to modules"),(0,o.kt)("p",null,"Let's start with a simple case. As your projects grow, it is a good idea\nto structure business logic and modeling code as separate ",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/tutorial/modules.html"},"Python\nmodules"),", i.e. separate\nfiles, instead of packing everything in a single flow file."),(0,o.kt)("p",null,"Code that is logically structured as bite-sized modules is easy\nto comprehend, debug, and test using standard Python testing tools like\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/unittest.html"},(0,o.kt)("inlineCode",{parentName:"a"},"unittest")),".\nImportantly, modules can be shared across flows, allowing you to create\nreusable libraries of shared functionality."),(0,o.kt)("p",null,"To see this in action, create a Python file called ",(0,o.kt)("inlineCode",{parentName:"p"},"teatime.py")," with\nthe following contents:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from datetime import datetime\n\ndef is_tea_time():\n    return 15 < datetime.utcnow().hour < 18\n")),(0,o.kt)("p",null,"Create a separate file, ",(0,o.kt)("inlineCode",{parentName:"p"},"teaflow.py")," with the following contents:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step\n\nclass TeaFlow(FlowSpec):\n\n    @step\n    def start(self):\n        import teatime\n        self.tea_time = teatime.is_tea_time()\n        self.next(self.end)\n\n    @step\n    def end(self):\n        print(f'is it tea time? {self.tea_time}')\n\nif __name__ == '__main__':\n    TeaFlow()\n")),(0,o.kt)("p",null,"Note how we ",(0,o.kt)("inlineCode",{parentName:"p"},"import teatime")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"start")," step to use the module. You\ncan run the flow as usual:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python teaflow.py run\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"teatime.py")," module works out of the box. If you have\n",(0,o.kt)("a",{parentName:"p",href:"/scaling/remote-tasks/requesting-resources"},"remote execution")," set up,\nyou can run the code ",(0,o.kt)("inlineCode",{parentName:"p"},"--with batch")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"--with kubernetes")," and it works\nequally well!"),(0,o.kt)("p",null,"Remote execution works since Metaflow packages all ",(0,o.kt)("inlineCode",{parentName:"p"},".py")," files in the same\ndirectory as the flow file, as well as its subdirectories, automatically. You\ncan see what files are being included by executing"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python teaflow.py package list\n")),(0,o.kt)("h2",{id:"separating-code-to-packages"},"Separating code to packages"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/tutorial/modules.html#packages"},"A Python\npackage")," is a\nlibrary that consists of multiple modules stored in a common directory.\nThese work out of the box with Metaflow too."),(0,o.kt)("p",null,"To test a local package, ",(0,o.kt)("inlineCode",{parentName:"p"},"crumpet"),", create a directory structure with the\nfollowing files:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"crumpetflow.py\ncrumpet/__init__.py\ncrumpet/teatime.py\ncrumpet/raisin.py\n")),(0,o.kt)("p",null,"Here, ",(0,o.kt)("inlineCode",{parentName:"p"},"__init__.py")," should be an empty file. It tells Python that ",(0,o.kt)("inlineCode",{parentName:"p"},"crumpet"),"\nshould be treated as a package. You can copy the ",(0,o.kt)("inlineCode",{parentName:"p"},"teatime.py")," module from the\nexample above."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"raisin.py")," file should look like follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import random\n\ndef is_dry():\n    return random.random() > 0.5\n")),(0,o.kt)("p",null,"and ",(0,o.kt)("inlineCode",{parentName:"p"},"crumpetflow.py")," like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step\n\nclass CrumpetFlow(FlowSpec):\n\n    @step\n    def start(self):\n        from crumpet import teatime, raisin\n        self.tea_time = teatime.is_tea_time()\n        self.is_dry = raisin.is_dry()\n        self.next(self.end)\n\n    @step\n    def end(self):\n        print(f'is it tea time? {self.tea_time}')\n        print(f'are raisins dry? {self.is_dry}')\n\nif __name__ == '__main__':\n    CrumpetFlow()\n")),(0,o.kt)("p",null,"You can execute the flow as usual"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"python crumpetflow.py run")," "),(0,o.kt)("p",null,"As before, you can run the code remotely ",(0,o.kt)("inlineCode",{parentName:"p"},"--with kubernetes")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"--with batch"),"\nand it works without you having to worry about packaging and installing the\n",(0,o.kt)("inlineCode",{parentName:"p"},"crumpet")," package manually."),(0,o.kt)("h2",{id:"common-packages-shared-across-flows"},"Common packages shared across flows"),(0,o.kt)("p",null,"You could add other flows next to ",(0,o.kt)("inlineCode",{parentName:"p"},"crumpetflow.py")," in the above directory\nhierarchy and they would all share the common ",(0,o.kt)("inlineCode",{parentName:"p"},"crumpet")," package."),(0,o.kt)("p",null,"As a project grows, it may become desirable to separate each flow in a\nsubdirectory of its own, so each person or a team can manage their\nfiles independently. All of them may share one or more common packages."),(0,o.kt)("p",null,"For instance, we can have two flows, ",(0,o.kt)("inlineCode",{parentName:"p"},"crumpetflow")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"teatimeflow")," as\nindependent subdirectories with their own READMEs, as well as a shared\n",(0,o.kt)("inlineCode",{parentName:"p"},"crumpet")," package:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"crumpetflow/flow.py\ncrumpetflow/README.md\nteatimeflow/flow.py\nteatimeflow/README.md\ncrumpet/__init__.py\ncrumpet/teatime.py\ncrumpet/raisin.py\n")),(0,o.kt)("p",null,"Unfortunately this wouldn't work out of the box since Metaflow packages\nonly the files under the ",(0,o.kt)("inlineCode",{parentName:"p"},"crumpetflow")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"teatimeflow")," directory, ignoring\n",(0,o.kt)("inlineCode",{parentName:"p"},"crumpet")," by default."),(0,o.kt)("p",null,"The solution is to including a symbolic link (",(0,o.kt)("em",{parentName:"p"},"symlink"),") in each flow directory, pointing\nat the common package that should be included. You can create a symlink as follows"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd crumpetflow\nln -s ../crumpet .\n")),(0,o.kt)("p",null,"With symlinks included the hierarchy looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"crumpetflow/flow.py\ncrumpetflow/README.md\ncrumpetflow/crumpet -> ../crumpet\nteatimeflow/flow.py\nteatimeflow/README.md\nteatimeflow/crumpet -> ../crumpet\ncrumpet/__init__.py\ncrumpet/teatime.py\ncrumpet/raisin.py\n")),(0,o.kt)("h3",{id:"using-common-packages-from-other-git-repositories"},"Using common packages from other Git repositories"),(0,o.kt)("p",null,"The above hierarchy works well when everything is stored in a single Git\nrepository. Technically, you could have ",(0,o.kt)("inlineCode",{parentName:"p"},"crumpetflow"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"teatimeflow"),", and\n",(0,o.kt)("inlineCode",{parentName:"p"},"crumpet")," as separate repositories as well, but you would need to ensure\nthat symlinks stay valid between repositories. This can be fragile."),(0,o.kt)("p",null,"If you want to include a package from a separate repository, a better approach\nis to use ",(0,o.kt)("a",{parentName:"p",href:"https://www.atlassian.com/git/tutorials/git-subtree"},"the ",(0,o.kt)("inlineCode",{parentName:"a"},"git subtree"),"\ncommand"),", which is an enhanced\nversion of Git submodules. With ",(0,o.kt)("inlineCode",{parentName:"p"},"git subtree")," you can nest a repository as\na subdirectory of another repository. For instance, the ",(0,o.kt)("inlineCode",{parentName:"p"},"crumpet")," package\ncould be a repository of its own, included as a subtree in every flow project\nthat wants to use it."),(0,o.kt)("p",null,"Alternatively, you can publish the package as a private Python package which\nyou can ",(0,o.kt)("a",{parentName:"p",href:"/scaling/dependencies/libraries"},"include with ",(0,o.kt)("inlineCode",{parentName:"a"},"@pypi")," or ",(0,o.kt)("inlineCode",{parentName:"a"},"@conda")),"."),(0,o.kt)("h2",{id:"non-python-dependencies"},"Non-Python dependencies"),(0,o.kt)("p",null,"By default, Metaflow packages ",(0,o.kt)("inlineCode",{parentName:"p"},".py")," files in the flow's directory hierarchy.\nYou can also include arbitrary files in the package for remote execution by\nincluding their file suffices in the ",(0,o.kt)("inlineCode",{parentName:"p"},"--package-suffixes")," option."),(0,o.kt)("p",null,"For instance, the example below shows how to include SQL files but you could\nalso include custom binaries or configuration files."),(0,o.kt)("p",null,"Create a directory ",(0,o.kt)("inlineCode",{parentName:"p"},"sql")," and store two files there:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"sql/populate_table.sql")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS movie(title, year, score)\nINSERT INTO movie VALUES ('Moana', 2016, 7.6), ('Scream', 2022, 6.3)\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"sql/get_movies.sql")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT title, year FROM movie\n")),(0,o.kt)("p",null,"Here's an example flow that accesses the SQL files, save it in ",(0,o.kt)("inlineCode",{parentName:"p"},"moviesqlflow.py"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step\n\nclass MovieSQLFlow(FlowSpec):\n\n    @step\n    def start(self):\n        import sqlite3\n        with sqlite3.connect(\"movies.db\") as conn:\n            cur = conn.cursor() \n            with open('sql/populate_table.sql') as f:\n                for line in f:\n                    cur.execute(line)\n            with open('sql/get_movies.sql') as f:\n                self.movies = cur.execute(f.read()).fetchall()\n        self.next(self.end)\n\n    @step\n    def end(self):\n        print(\"Found movies:\")\n        for title, year in self.movies:\n            print(title, year)\n\nif __name__ == '__main__':\n    MovieSQLFlow()\n")),(0,o.kt)("p",null,"Note that you need to refer to packages files through relative directories,\nlike ",(0,o.kt)("inlineCode",{parentName:"p"},"sql/")," above, instead of absolute paths like ",(0,o.kt)("inlineCode",{parentName:"p"},"/home/alice/sql/"),". The directory layout\nis made available remotely but not in any guaranteed absolute location."),(0,o.kt)("p",null,"Execute the code as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python moviesqlflow.py --package-suffixes .sql run\n")),(0,o.kt)("p",null,"Locally, it would work without ",(0,o.kt)("inlineCode",{parentName:"p"},"--package-suffixes")," but when running remotely\n",(0,o.kt)("inlineCode",{parentName:"p"},"--with batch")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"--with kubernetes"),", it would complain about missing ",(0,o.kt)("inlineCode",{parentName:"p"},".sql")," files\nunless ",(0,o.kt)("inlineCode",{parentName:"p"},"--package-suffixes")," is specified."),(0,o.kt)("p",null,"You can confirm that all dependencies are included properly by executing"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python moviesqlflow.py --package-suffixes .sql package list\n")))}u.isMDXComponent=!0}}]);