"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7505],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(a),u=r,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return a?n.createElement(h,i(i({ref:t},c),{},{components:a})):n.createElement(h,i({ref:t},c))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5195:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={},i="Easy Custom Reports with Card Components",s={unversionedId:"metaflow/visualizing-results/easy-custom-reports-with-card-components",id:"metaflow/visualizing-results/easy-custom-reports-with-card-components",title:"Easy Custom Reports with Card Components",description:"Default Cards are useful during development when you need to quickly inspect artifacts",source:"@site/docs/metaflow/visualizing-results/easy-custom-reports-with-card-components.md",sourceDirName:"metaflow/visualizing-results",slug:"/metaflow/visualizing-results/easy-custom-reports-with-card-components",permalink:"/metaflow/visualizing-results/easy-custom-reports-with-card-components",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/metaflow/visualizing-results/easy-custom-reports-with-card-components.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Effortless Task Inspection with Default Cards",permalink:"/metaflow/visualizing-results/effortless-task-inspection-with-default-cards"},next:{title:"Updating Cards During Task Execution",permalink:"/metaflow/visualizing-results/dynamic-cards"}},l={},p=[{value:"Showing Plots",id:"showing-plots",level:2},{value:"Charting with <code>VegaChart</code>",id:"charting-with-vegachart",level:3},{value:"Using Altair - a Python API for Vega",id:"using-altair---a-python-api-for-vega",level:3},{value:"Showing an image with <code>Image</code>",id:"showing-an-image-with-image",level:3},{value:"Multiple Cards In a Step",id:"multiple-cards-in-a-step",level:2},{value:"Comparing Data Across Runs",id:"comparing-data-across-runs",level:2}],c={toc:p};function d(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"easy-custom-reports-with-card-components"},"Easy Custom Reports with Card Components"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Default Cards")," are useful during development when you need to quickly inspect artifacts\nproduced by a task or visualize the overall structure of the flow. As your project\nprogresses, you may want to create a custom card that highlights information specific to\nyour project."),(0,r.kt)("p",null,"The easiest way to create a custom card is to use built-in components: ",(0,r.kt)("em",{parentName:"p"},"Images"),",\n",(0,r.kt)("em",{parentName:"p"},"Tables"),", ",(0,r.kt)("em",{parentName:"p"},"Artifacts"),", ",(0,r.kt)("em",{parentName:"p"},"VegaChart")," charts, ",(0,r.kt)("em",{parentName:"p"},"Markdown")," text, and ",(0,r.kt)("em",{parentName:"p"},"ProgressBar")," for\ntracking progress. You can construct a report with these\ncomponents in Python without having to worry about HTML or styling in CSS. Rest assured\nthat if components ever show their limits, you have an option to customize reports even\nfurther using ",(0,r.kt)("a",{parentName:"p",href:"advanced-shareable-cards-with-card-templates"},(0,r.kt)("em",{parentName:"a"},"Card Templates")),"."),(0,r.kt)("p",null,"Let\u2019s start with a simple example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from metaflow import FlowSpec, step, card, Parameter, current\nfrom metaflow.cards import Markdown\n\nclass GuessCardFlow(FlowSpec):\n\n    number = Parameter(\'number\', default=3)\n\n    @card(type=\'blank\')\n    @step\n    def start(self):\n        current.card.append(Markdown("# Guess my number"))\n        if self.number > 5:\n            current.card.append(Markdown("My number is **smaller** \u2b07\ufe0f"))\n        elif self.number < 5:\n            current.card.append(Markdown("My number is **larger** \u2b06\ufe0f"))\n        else:\n            current.card.append(Markdown("## Correct! \ud83c\udf89"))\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == "__main__":\n    GuessCardFlow()\n')),(0,r.kt)("p",null,"Notice how in the ",(0,r.kt)("inlineCode",{parentName:"p"},"@card")," decorator we specify ",(0,r.kt)("inlineCode",{parentName:"p"},"type=\u2019blank\u2019.")," Instead of the ",(0,r.kt)("em",{parentName:"p"},"Default\nCard"),", we want an empty card with no content by default. The ",(0,r.kt)("inlineCode",{parentName:"p"},"blank")," card provides a\nnice empty canvas for custom components."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"current.card.append")," call adds a component in the card. Each component occupies a\nrow in the card, so you don\u2019t have to worry about the layout. If you run\n",(0,r.kt)("inlineCode",{parentName:"p"},"GuessCardFlow"),", you will see a card like below. The exact content depends on the value\nof the number parameter."),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(5955).Z,width:"696",height:"161"})),(0,r.kt)("p",null,"Currently, the following components are provided:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Markdown"))," - output a block of text formatted as\n",(0,r.kt)("a",{parentName:"li",href:"https://www.markdownguide.org"},"Markdown"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Table"))," - a table of rows and columns. Each cell may include other components."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Image"))," - an image, constructed from bytes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Artifact"))," - pretty-print any Python object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"VegaChart"))," - plot charts with ",(0,r.kt)("a",{parentName:"li",href:"https://vega.github.io/vega-lite"},"Vega Lite"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"ProgressBar"))," - show progress.")),(0,r.kt)("p",null,"The API reference documents ",(0,r.kt)("a",{parentName:"p",href:"/api/cards#card-components"},"the card components in detail"),"."),(0,r.kt)("p",null,"The following example demonstrates the first four components in action (more\nabout ",(0,r.kt)("inlineCode",{parentName:"p"},"VegaChart")," below and ",(0,r.kt)("inlineCode",{parentName:"p"},"ProgressBar")," in ",(0,r.kt)("a",{parentName:"p",href:"dynamic-cards"},"the next chapter"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step, current, card\nfrom metaflow.cards import Markdown, Artifact, Image, Table\nimport requests\n\nROOT = 'https://upload.wikimedia.org/wikipedia/commons/'\nIMAGES = {\n    'Mammals': {\n        'cat': 'b/b9/CyprusShorthair.jpg',\n        'bandicoot': '8/8b/Perameles_gunni.jpg',\n        'dog': '5/5d/Akbash_Dog_male_2016.jpg'\n    },\n    'Birds': {\n        'penguin': 'b/bf/Spheniscus_humboldti_20070116.jpg'\n    }\n}\n\nclass ComponentDemoFlow(FlowSpec):\n\n    @card(type='blank')\n    @step\n    def start(self):\n        for section, animals in IMAGES.items():\n            current.card.append(Markdown('## %s' % section))\n            rows = []\n            for label, url in animals.items():\n                resp = requests.get(ROOT + url,\n                                    headers={'user-agent': 'metaflow-example'})\n                rows.append([Markdown('Animal: **%s**' % label),\n                             Artifact(resp.headers),\n                             Image(resp.content)])\n            current.card.append(Table(rows))\n        self.next(self.end)\n\n    @step\n    def end(self):\n       pass\n\nif __name__ == '__main__':\n    ComponentDemoFlow()\n")),(0,r.kt)("p",null,"The resulting card will look like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(2622).Z,width:"1122",height:"903"})),(0,r.kt)("p",null,"Notice how the ",(0,r.kt)("inlineCode",{parentName:"p"},"Artifact")," component automatically truncates a large dictionary in the\nmiddle column, so you can use it to safely output even huge objects. It is also worth\nknowing that the ",(0,r.kt)("inlineCode",{parentName:"p"},"Image")," component stores the image in the resulting HTML file itself,\nso you can view the card without an internet connection or even if the original image\nbecomes unavailable."),(0,r.kt)("h2",{id:"showing-plots"},"Showing Plots"),(0,r.kt)("p",null,"As a developer, you may care more about showing data visualizations rather than\ncat photos. There are two ways to embed visualizations in a card:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"VegaChart")," to produce a chart on the fly.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"Image")," to include an image produced by any library."))),(0,r.kt)("p",null,"Let's cover both the approaches."),(0,r.kt)("h3",{id:"charting-with-vegachart"},"Charting with ",(0,r.kt)("inlineCode",{parentName:"h3"},"VegaChart")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"VegaChart")," was introduced in Metaflow 2.11. Make sure you have a recent\nenough version of Metaflow to use this feature.")),(0,r.kt)("p",null,"Cards come with built-in support for charts created using ",(0,r.kt)("a",{parentName:"p",href:"https://vega.github.io/vega-lite/"},"the Vega Lite\nspecification"),". Vega Lite allows you to\nspecify rich visualizations in JSON without having to install any additional\nlibraries."),(0,r.kt)("p",null,"You can navigate to ",(0,r.kt)("a",{parentName:"p",href:"https://vega.github.io/vega-lite/examples/"},"the gallery of Vega Lite\nexamples")," and copy-paste any of the\nJSON specs in the ",(0,r.kt)("inlineCode",{parentName:"p"},"VegaDemo")," below (remember to change ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," URLs as below). For\ninstance, ",(0,r.kt)("a",{parentName:"p",href:"https://vega.github.io/vega-lite/examples/histogram.html"},"this example shows a simple\nhistogram"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from metaflow import FlowSpec, step, current, card\nfrom metaflow.cards import VegaChart\n\nSPEC = {\n  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",\n  "data": {"url": "https://vega.github.io/vega-lite/examples/data/movies.json"},\n  "mark": "bar",\n  "encoding": {\n    "x": {\n      "bin": True,\n      "field": "IMDB Rating"\n    },\n    "y": {"aggregate": "count"}\n  }\n}\n\nclass VegaDemo(FlowSpec):\n    @card(type="blank")\n    @step\n    def start(self):\n        current.card.append(VegaChart(SPEC))\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == "__main__":\n    VegaDemo()\n')),(0,r.kt)("p",null,"Run the flow to see a histogram like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(2401).Z,width:"1570",height:"316"})),(0,r.kt)("p",null,"You can find many more examples of ",(0,r.kt)("inlineCode",{parentName:"p"},"VegaChart")," in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/outerbounds/dynamic-card-examples/"},"the Dynamic\nCard gallery"),"."),(0,r.kt)("h3",{id:"using-altair---a-python-api-for-vega"},"Using Altair - a Python API for Vega"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://altair-viz.github.io/"},"The Altair library")," provides a convenient\nPython API for Vega, so you don't have to navigate the JSON specification by hand.\nIn particular, it makes it easy to visualize data in Pandas dataframes."),(0,r.kt)("p",null,"Here is a simple example that plots data from a dataframe using Altair. Note\nthat it uses ",(0,r.kt)("a",{parentName:"p",href:"/scaling/dependencies/libraries#pypi-in-action"},"the ",(0,r.kt)("inlineCode",{parentName:"a"},"@pypi"),"\ndecorator")," to make sure\nthat ",(0,r.kt)("inlineCode",{parentName:"p"},"pandas")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"altair")," are available:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step, current, card, pypi\nfrom metaflow.cards import VegaChart\n\nclass AltairDemo(FlowSpec):\n\n    @pypi(packages={\"altair\": \"5.2.0\", \"pandas\": \"2.1.4\"}, python=\"3.11.7\")\n    @card(type=\"blank\")\n    @step\n    def start(self):\n        import pandas as pd\n        import altair as alt\n        df = pd.DataFrame({'item': ['apple', 'avocado', 'fish'],\n                           'cost': [2, 5, 9]})\n        chart = alt.Chart(df).mark_bar().encode(\n            x='item',\n            y='cost'\n        )\n        current.card.append(VegaChart.from_altair_chart(chart))\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == \"__main__\":\n    AltairDemo()\n")),(0,r.kt)("p",null,"Run the flow to see a bar chart like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(5676).Z,width:"1507",height:"448"})),(0,r.kt)("p",null,"You can find more inspiration and examples in ",(0,r.kt)("a",{parentName:"p",href:"https://altair-viz.github.io/gallery/index.html"},"Altair's gallery of\nexamples")," as well as in\nour ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/outerbounds/dynamic-card-examples/"},"Dynamic Card gallery"),"."),(0,r.kt)("h3",{id:"showing-an-image-with-image"},"Showing an image with ",(0,r.kt)("inlineCode",{parentName:"h3"},"Image")),(0,r.kt)("p",null,"Besides Vega and Altair, you can use any visualization\nlibrary in Python to produce plots, save the resulting image in a file or an in-memory\nobject, and provide the contents of the file (bytes) to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Image")," component."),(0,r.kt)("p",null,"For convenience, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Image")," component provides a utility method,\n",(0,r.kt)("inlineCode",{parentName:"p"},"Image.from_matplotlib"),", that extracts bytes from a ",(0,r.kt)("a",{parentName:"p",href:"https://matplotlib.org"},"Matplotlib"),"\nfigure automatically. Here\u2019s an example that uses the ",(0,r.kt)("a",{parentName:"p",href:"/scaling/dependencies"},(0,r.kt)("inlineCode",{parentName:"a"},"@conda"),"\ndecorator")," to make sure that Matplotlib is available. If you have\nMatplotlib and Numpy already installed in your environment, you can run the example\nwithout ",(0,r.kt)("inlineCode",{parentName:"p"},"@conda_base"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step, current, card, conda_base\nfrom metaflow.cards import Image\n\n@conda_base(python='3.8.1',\n            libraries={'numpy':'1.20.3', 'matplotlib':'3.4.2'})\nclass MatplotlibFlow(FlowSpec):\n\n    @card(type='blank')\n    @step\n    def start(self):\n        import matplotlib.pyplot as plt\n        import numpy\n        fig = plt.figure()\n        x = numpy.random.normal(0, 0.1, 100000)\n        y = numpy.random.normal(0, 0.1, 100000)\n        plt.scatter(x, y, s=0.1, color=(0.2, 0.2, 1.0, 0.2))\n        current.card.append(Image.from_matplotlib(fig))\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == '__main__':\n    MatplotlibFlow()\n")),(0,r.kt)("p",null,"The resulting card will look like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(8778).Z,width:"1116",height:"606"})),(0,r.kt)("p",null,"Note that you can click the image in the card to see a larger version of it."),(0,r.kt)("h2",{id:"multiple-cards-in-a-step"},"Multiple Cards In a Step"),(0,r.kt)("p",null,"You may want to produce multiple separate cards in a step. Maybe one card shows\nhigh-level business metrics that are suitable for wide distribution, while another shows\ntechnical details for debugging purposes."),(0,r.kt)("p",null,"When multiple cards are present, calling ",(0,r.kt)("inlineCode",{parentName:"p"},"current.card.append")," is ambiguous: As such, it\ndoesn\u2019t know which of the many cards the component should be added to. Metaflow will\nshow a warning if you try to do this, but it won\u2019t crash the flow - nothing card-related\nshould ever cause the flow to crash."),(0,r.kt)("p",null,"Use the id keyword argument in the ",(0,r.kt)("inlineCode",{parentName:"p"},"@card")," decorator to uniquely identify each card.\nThen, you can refer to a specific card with the ",(0,r.kt)("inlineCode",{parentName:"p"},"current.card[card_id].append")," notation.\nHere\u2019s an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step, current, card\nfrom metaflow.cards import Markdown\n\nclass ManyCardsFlow(FlowSpec):\n\n    @card(type='blank', id='first')\n    @card(type='blank', id='second')\n    @step\n    def start(self):\n        current.card['first'].append(\n            Markdown('# I am the first card'))\n        current.card['second'].append(\n            Markdown('# I am the second card'))\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == '__main__':\n    ManyCardsFlow()\n")),(0,r.kt)("p",null,"When a task has multiple cards, the \u201c",(0,r.kt)("inlineCode",{parentName:"p"},"card view"),"\u201d command will list all cards that are\nviewable for the task. You must specify which exact card you want to view:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If you have specified an ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," for the card, use the ",(0,r.kt)("inlineCode",{parentName:"li"},"\u2013id")," option to view a card\ncorresponding to the given ",(0,r.kt)("inlineCode",{parentName:"li"},"id"),". For instance, \u201c",(0,r.kt)("inlineCode",{parentName:"li"},"card view \u2013id first"),"\u201d to see the card\ncorresponding to ",(0,r.kt)("inlineCode",{parentName:"li"},"@card(id=\u2019first\u2019)"),"."),(0,r.kt)("li",{parentName:"ul"},"Each card has a unique hash value which is shown by \u201c",(0,r.kt)("inlineCode",{parentName:"li"},"card view"),"\u201d and \u201c",(0,r.kt)("inlineCode",{parentName:"li"},"card list"),"\u201d.\nYou can execute e.g. \u201c",(0,r.kt)("inlineCode",{parentName:"li"},"card view \u2013hash 23b4e"),"\u201d to see a card corresponding to the\ngiven hash.")),(0,r.kt)("h2",{id:"comparing-data-across-runs"},"Comparing Data Across Runs"),(0,r.kt)("p",null,"In many cases, you may want to produce a single card that characterizes the results of\nthe whole flow. A natural way to do this is to assign a card to the ",(0,r.kt)("inlineCode",{parentName:"p"},"end")," step that has\naccess to all results produced by a run."),(0,r.kt)("p",null,"Besides accessing all results of a single run, you may want to access results across\nmultiple runs and produce a card that compares the latest data to past results. Thanks\nto the fact that Metaflow persists and versions all results, this can be done easily:\nJust use ",(0,r.kt)("a",{parentName:"p",href:"../client"},"the Client API")," to access past results."),(0,r.kt)("p",null,"The following example demonstrates how you can create a card that accesses all data\nproduced by a flow at the ",(0,r.kt)("inlineCode",{parentName:"p"},"end")," step, as well as compares results across historical\nruns."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step, current, card, conda_base, Flow, Parameter\nfrom metaflow.cards import Image, Table, Artifact\nfrom itertools import islice\n\n@conda_base(python='3.8.1',\n            libraries={'numpy':'1.20.3', 'matplotlib':'3.4.2'})\nclass CompareRunsFlow(FlowSpec):\n\n    alpha = Parameter('alpha', default=0.1)\n\n    @step\n    def start(self):\n        import numpy as np\n        self.x = np.linspace(-1, 2, 100)\n        self.y = self.alpha * np.exp(self.x)\n        self.next(self.end)\n\n    @card(type='blank')\n    @step\n    def end(self):\n        self.compare_runs()\n\n    def compare_runs(self):\n        import matplotlib.pyplot as plt\n        rows = []\n        fig = plt.figure()\n        for run in islice(Flow('CompareRunsFlow'), 3):\n            data = run['start'].task.data\n            rows.append(list(map(Artifact, (run.id,\n                                            run.created_at,\n                                            data.alpha))))\n            plt.plot(data.x, data.y, label=run.id)\n        plt.legend()\n        current.card.append(Table(rows,\\\n            headers=['Run ID', 'Created', 'Alpha']))\n        current.card.append(Image.from_matplotlib(fig))\n\nif __name__ == '__main__':\n    CompareRunsFlow()\n")),(0,r.kt)("p",null,"To see the comparison in action, run the flow at least three times with varying values\nof the ",(0,r.kt)("inlineCode",{parentName:"p"},"\u2013alpha")," parameter. Note the following features of the flow:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The flow-level card is produced by a separate helper function, ",(0,r.kt)("inlineCode",{parentName:"li"},"compare_runs"),". It is a\ngood idea to separate code that produces a complex card in its own function or even in\na separate module. The ",(0,r.kt)("inlineCode",{parentName:"li"},"current.card.append")," call is available globally when a task is\nexecuting, so there is no need to restrict card creation in a ",(0,r.kt)("inlineCode",{parentName:"li"},"@step")," function."),(0,r.kt)("li",{parentName:"ul"},"The \u201c",(0,r.kt)("inlineCode",{parentName:"li"},"islice(Flow('CompareRunsFlow'), 3)"),"\u201d expression is used to access the latest\nthree runs of the flow, including the currently executing one. Thanks to the\n",(0,r.kt)("a",{parentName:"li",href:"/scaling/tagging"},"namespacing")," functionality of Metaflow, the expression returns the\nlatest three runs executed by you personally, i.e. in your usernamespace, when you run\nthe flow locally. In contrast, if ",(0,r.kt)("a",{parentName:"li",href:"../../production/coordinating-larger-metaflow-projects"},"deployed to a production\nenvironment"),", it returns the\nlatest three production runs. This way, you can cleanly manage multiple versions of\nthe project, some in development and some in production, and keep the results\nseparate."),(0,r.kt)("li",{parentName:"ul"},"You can use any off-the-shelf libraries, like Matplotlib here, to compare, visualize,\nand analyze results. You can develop your own helper libraries or ",(0,r.kt)("a",{parentName:"li",href:"advanced-shareable-cards-with-card-templates"},"Card\nTemplates")," which standardize the\nanalyses and reporting that are relevant for your projects.")),(0,r.kt)("p",null,"The resulting card will look something like below. It shows the latest three runs of the\nflow, the parameter supplied for each run, and a visualization that allows you to\ncompare the runs."),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(2457).Z,width:"1439",height:"783"})))}d.isMDXComponent=!0},5676:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/altairdemo-bfdf5702d2c4a688ad8d4e148d390871.png"},2457:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/card-docs-compare-02220a2117e515da3f3ea8c867ee0d39.png"},2622:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/card-docs-components-f7988bff68a098370c7061566787ccf1.png"},5955:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/card-docs-guess-310a187be8a868c4aaa3545911dedfdc.png"},8778:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/card-docs-plot-85aac4dec56f3d6eff34b772fcd182be.png"},2401:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/vegademo-498cc53981631f76441a2fd434a229e8.png"}}]);