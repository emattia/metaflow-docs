"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6510],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=d(n),u=r,h=m["".concat(l,".").concat(u)]||m[u]||c[u]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4753:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const o={},i="Updating Cards During Task Execution",s={unversionedId:"metaflow/visualizing-results/dynamic-cards",id:"metaflow/visualizing-results/dynamic-cards",title:"Updating Cards During Task Execution",description:"[Updating, dynamic cards were introduced in Metaflow",source:"@site/docs/metaflow/visualizing-results/dynamic-cards.md",sourceDirName:"metaflow/visualizing-results",slug:"/metaflow/visualizing-results/dynamic-cards",permalink:"/metaflow/visualizing-results/dynamic-cards",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/metaflow/visualizing-results/dynamic-cards.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Easy Custom Reports with Card Components",permalink:"/metaflow/visualizing-results/easy-custom-reports-with-card-components"},next:{title:"Advanced, Shareable Cards with Card Templates",permalink:"/metaflow/visualizing-results/advanced-shareable-cards-with-card-templates"}},l={},d=[{value:"Monitoring progress with <code>ProgressBar</code>",id:"monitoring-progress-with-progressbar",level:2},{value:"Populating a card on the fly",id:"populating-a-card-on-the-fly",level:2},{value:"Updating charts on the fly",id:"updating-charts-on-the-fly",level:2}],p={toc:d};function c(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"updating-cards-during-task-execution"},"Updating Cards During Task Execution"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://outerbounds.com/blog/metaflow-dynamic-cards/"},"Updating, dynamic cards were introduced in Metaflow\n2.11"),". Make sure you have a recent\nenough version of Metaflow to use this feature.")),(0,r.kt)("p",null,"All the cards presented this far have been created after a task has completed. Sometimes\nyou want see results ",(0,r.kt)("em",{parentName:"p"},"during task execution"),", for instance, to monitor progress\nof a long-running task like model training or a demanding data processing job."),(0,r.kt)("p",null,"To support real-time use cases like this, cards allow you to update the state\nof certain components - currently ",(0,r.kt)("inlineCode",{parentName:"p"},"Markdown"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"VegaChart"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"ProgressBar")," -\non the fly. In addition, you can ",(0,r.kt)("inlineCode",{parentName:"p"},"append")," new components in a card while a\ntask is running, e.g. to show results as they are being produced."),(0,r.kt)("p",null,"Let's start with a simple example."),(0,r.kt)("h2",{id:"monitoring-progress-with-progressbar"},"Monitoring progress with ",(0,r.kt)("inlineCode",{parentName:"h2"},"ProgressBar")),(0,r.kt)("p",null,"Let's create a ",(0,r.kt)("inlineCode",{parentName:"p"},"ProgressBar")," and a text field using ",(0,r.kt)("inlineCode",{parentName:"p"},"Markdown"),". We will then\n",(0,r.kt)("inlineCode",{parentName:"p"},"update"),"  their contents while a task is executing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from metaflow import step, FlowSpec, current, card\nfrom metaflow.cards import Markdown, ProgressBar\n\nclass ClockFlow(FlowSpec):\n    @card(type="blank", refresh_interval=1)\n    @step\n    def start(self):\n        from datetime import datetime\n        import time\n\n        m = Markdown("# Clock is starting \ud83d\udd52")\n        p = ProgressBar(max=30, label="Seconds passed")\n        current.card.append(m)\n        current.card.append(p)\n        current.card.refresh()\n        for i in range(31):\n            t = datetime.now().strftime("%H:%M:%S")\n            m.update(f"# Time is {t}")\n            p.update(i)\n            current.card.refresh()\n            print(t)\n            time.sleep(1)\n        m.update("# \u23f0 ring ring!")\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == "__main__":\n    ClockFlow()\n')),(0,r.kt)("p",null,"This simple example shows the main elements of any updating card:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Start by adding desired components in a card with ",(0,r.kt)("inlineCode",{parentName:"li"},"append"),"."),(0,r.kt)("li",{parentName:"ol"},"Periodically while a task executing, call the ",(0,r.kt)("inlineCode",{parentName:"li"},"update")," method of each\ncomponent you want to update with fresh content. Or, you can add new\ncomponents with ",(0,r.kt)("inlineCode",{parentName:"li"},"append"),"."),(0,r.kt)("li",{parentName:"ol"},"To schedule a card to be refreshed, call ",(0,r.kt)("inlineCode",{parentName:"li"},"refresh"),".")),(0,r.kt)("p",null,"The last point is important: Cards update only when you call ",(0,r.kt)("inlineCode",{parentName:"p"},"refresh")," explicitly,\nand always at the end when the task finishes."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Updating cards are not designed to stream data to the UI in milliseconds. Instead,\nthey allow you to refresh the card state every few seconds, but there is no\nguarantee how long it will take before the refreshed card receives the latest data.\nIn particular, if you call ",(0,r.kt)("inlineCode",{parentName:"p"},"refresh")," too often (e.g. inside a ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," loop), some\nupdates may get ignored. Design your applications to call ",(0,r.kt)("inlineCode",{parentName:"p"},"refresh")," only every few\nseconds or less frequently.")),(0,r.kt)("p",null,"To see this card live, start a local card viewer (or use Metaflow UI):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python clockflow.py card server --poll-interval 1\n")),(0,r.kt)("p",null,"To highlight liveness of cards, this card updates every second,\nas defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"@card(refresh_interval=1)")," which makes the card update\nevery second, and ",(0,r.kt)("inlineCode",{parentName:"p"},"--poll-interval 1")," which makes the viewer to poll updates\nevery second. If you have a task that runs for hours, you don't need to set\nthese attributes as cards update every 3-5 seconds by default."),(0,r.kt)("p",null,"You can run the flow as usual:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python clockflow.py run\n")),(0,r.kt)("p",null,"The card viewer should show you a progress bar and a timer that update in real time:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(9532).Z,width:"800",height:"213"})),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Use the Metaflow UI and the Local Card Viewer to see live updates frequently. The\n",(0,r.kt)("inlineCode",{parentName:"p"},"card view")," CLI command and the ",(0,r.kt)("inlineCode",{parentName:"p"},"get_cards")," API see only delayed snapshots of cards.")),(0,r.kt)("p",null,"Note that you can have many concurrent ",(0,r.kt)("inlineCode",{parentName:"p"},"ProgressBar"),"s in a single card. You can find\nan example of this and many more in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/outerbounds/dynamic-card-examples/"},"the Dynamic Card\ngallery"),". "),(0,r.kt)("h2",{id:"populating-a-card-on-the-fly"},"Populating a card on the fly"),(0,r.kt)("p",null,"Besides being able to monitor how a long-running task is progressing, it is useful\nto be able to see what is being produced by it. You can do this by adding more elements\nin a card on the fly, like in this example that adds 10 photos in a card over 10 seconds:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import time\nfrom metaflow import FlowSpec, Parameter, step, card, current\nfrom metaflow.cards import Image\n\nclass LiveResultsFlow(FlowSpec):\n\n    @card(type=\'blank\', refresh_interval=1)\n    @step\n    def start(self):\n        import requests\n        for i in range(10):\n            img = requests.get("https://picsum.photos/400/100")\n            current.card.append(Image(img.content))\n            current.card.refresh()\n            time.sleep(1)\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == "__main__":\n    LiveResultsFlow()\n')),(0,r.kt)("p",null,"When you run the flow, you should see a card that updates live:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(9850).Z,width:"800",height:"332"})),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Images, as well as all other content, are embedded in the card itself\nso it is a good idea the keep their total size under 10MB or so.")),(0,r.kt)("h2",{id:"updating-charts-on-the-fly"},"Updating charts on the fly"),(0,r.kt)("p",null,"Live charts are the bread and butter of observability. It is easy to create\none with cards: Just ",(0,r.kt)("a",{parentName:"p",href:"easy-custom-reports-with-card-components#charting-with-vegachart"},"add a\n",(0,r.kt)("inlineCode",{parentName:"a"},"VegaChart")),",\nupdate its source data on the fly, and call ",(0,r.kt)("inlineCode",{parentName:"p"},"update")," with the updated specification.\nHere is an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from metaflow import step, FlowSpec, current, card\nfrom metaflow.cards import VegaChart\nfrom datetime import datetime\nimport random\nimport time\nimport math\n\nvega_spec = {\n    "$schema": "https://vega.github.io/schema/vega-lite/v5.json",\n    "data": {"values": []},\n    "mark": "line",\n    "encoding": {\n        "x": {"field": "time", "type": "temporal"},\n        "y": {"field": "value", "type": "quantitative"},\n    },\n}\n\nclass SimpleChartFlow(FlowSpec):\n    @card(type="blank", refresh_interval=1)\n    @step\n    def start(self):\n        data = vega_spec["data"]["values"]\n        chart = VegaChart(vega_spec)\n        current.card.append(chart)\n        for i in range(30):\n            val = math.sin(i * 0.1) + random.random() * 0.1 - 0.05\n            data.append({"time": datetime.now().isoformat(), "value": val})\n            chart.update(vega_spec)\n            current.card.refresh()\n            time.sleep(1)\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == "__main__":\n    SimpleChartFlow()\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Remember to provide the full dataset in every\nchart update, like the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," list above, not only the latest datapoints.")),(0,r.kt)("p",null,"When you run the flow, you should see an updating chart like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(9194).Z,width:"800",height:"200"})),(0,r.kt)("p",null,"Find many more examples of updating charts in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/outerbounds/dynamic-card-examples/"},"the Dynamic Card\ngallery"),"."))}c.isMDXComponent=!0},9532:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/clockflow-91cbfa31de4396698ee9d8fa8c5ca670.gif"},9850:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/liveresultsflow-cda95caee9f851747525abde821e5ee3.gif"},9194:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/simplechart-c5debc7b1d53cfd85631152289d902c4.gif"}}]);