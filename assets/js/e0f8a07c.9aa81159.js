"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8889],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,u=m["".concat(s,".").concat(d)]||m[d]||f[d]||i;return n?a.createElement(u,l(l({ref:t},c),{},{components:n})):a.createElement(u,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4817:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>f,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={},l="Episode 1: Playlist",o={unversionedId:"v/r/getting-started/tutorials/season-1-the-local-experience/episode01",id:"v/r/getting-started/tutorials/season-1-the-local-experience/episode01",title:"Episode 1: Playlist",description:"This flow loads a movie metadata CSV file and builds a playlist for your favorite movie",source:"@site/docs/v/r/getting-started/tutorials/season-1-the-local-experience/episode01.md",sourceDirName:"v/r/getting-started/tutorials/season-1-the-local-experience",slug:"/v/r/getting-started/tutorials/season-1-the-local-experience/episode01",permalink:"/v/r/getting-started/tutorials/season-1-the-local-experience/episode01",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/v/r/getting-started/tutorials/season-1-the-local-experience/episode01.md",tags:[],version:"current",frontMatter:{},sidebar:"r",previous:{title:"Episode 0: Hello World",permalink:"/v/r/getting-started/tutorials/season-1-the-local-experience/episode00"},next:{title:"Episode 2: Statistics",permalink:"/v/r/getting-started/tutorials/season-1-the-local-experience/episode02"}},s={},p=[{value:"Showcasing:",id:"showcasing",level:2},{value:"To play this episode:",id:"to-play-this-episode",level:2},{value:"Dataset and flow script",id:"dataset-and-flow-script",level:2}],c={toc:p};function f(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"episode-1-playlist"},"Episode 1: Playlist"),(0,r.kt)("p",null,"This flow loads a movie metadata CSV file and builds a playlist for your favorite movie\ngenre. Everything in Metaflow is versioned, so you can run it multiple times and view\nall the historical playlists with the Metaflow client in an R Markdown Notebook."),(0,r.kt)("h2",{id:"showcasing"},"Showcasing:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Basic ",(0,r.kt)("a",{parentName:"li",href:"../../../metaflow/basics#how-to-define-parameters-for-flows"},"Metaflow\nParameters"),"."),(0,r.kt)("li",{parentName:"ul"},"Running workflow ",(0,r.kt)("a",{parentName:"li",href:"../../../metaflow/basics#branch"},"branches")," in parallel and joining\nresults."),(0,r.kt)("li",{parentName:"ul"},"Using the ",(0,r.kt)("a",{parentName:"li",href:"../../../metaflow/client"},"Metaflow client")," in an R Markdown Notebook.")),(0,r.kt)("h2",{id:"to-play-this-episode"},"To play this episode:"),(0,r.kt)("p",null,"If you haven't yet pulled the tutorials to your current working directory, you can\nfollow the instructions ",(0,r.kt)("a",{parentName:"p",href:"../#pull-tutorials"},"here"),"."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"cd tutorials/01-playlist")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Rscript playlist.R show")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Rscript playlist.R run")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Rscript playlist.R run --genre comedy")),(0,r.kt)("li",{parentName:"ol"},"Open ",(0,r.kt)("inlineCode",{parentName:"li"},"playlist.Rmd")," in RStudio.")),(0,r.kt)("h2",{id:"dataset-and-flow-script"},"Dataset and flow script"),(0,r.kt)("p",null,"The dataset ",(0,r.kt)("inlineCode",{parentName:"p"},"movies.csv")," looks like this"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"movie_title"),(0,r.kt)("th",{parentName:"tr",align:"left"},"title_year"),(0,r.kt)("th",{parentName:"tr",align:"left"},"genre"),(0,r.kt)("th",{parentName:"tr",align:"left"},"gross"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Avatar"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2009"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sci-Fi"),(0,r.kt)("td",{parentName:"tr",align:"left"},"760505847")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Pirates of the Caribbean: At World's End"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2007"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Fantasy"),(0,r.kt)("td",{parentName:"tr",align:"left"},"309404152")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Spectre"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2015"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Thriller"),(0,r.kt)("td",{parentName:"tr",align:"left"},"200074175")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"..."),(0,r.kt)("td",{parentName:"tr",align:"left"},"..."),(0,r.kt)("td",{parentName:"tr",align:"left"},"..."),(0,r.kt)("td",{parentName:"tr",align:"left"},"...")))),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(3362).Z,width:"1482",height:"572"})),(0,r.kt)("p",null,"The flow script below performs the following steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Ingests a CSV file containing metadata about movies."),(0,r.kt)("li",{parentName:"ol"},"In parallel branches:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Filters movies by the genre parameter."),(0,r.kt)("li",{parentName:"ul"},"Choose a random movie from a different genre."))),(0,r.kt)("li",{parentName:"ol"},"Displays the top entries from the playlist.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'library(metaflow)\n\n# Parse the CSV file\nstart <- function(self){\n    self$df <- read.csv("./movies.csv", stringsAsFactors=FALSE)\n}\n\n# Filter the movies by genre.\npick_movie <- function(self){\n    # select rows which has the specified genre\n    movie_by_genre <- self$df[self$df$genre == self$genre, ]\n\n    # randomize the title names\n    shuffled_rows <- sample(nrow(movie_by_genre))\n    self$movies <- movie_by_genre[shuffled_rows, ]\n}\n\n# This step chooses a random movie from a different genre.\nbonus_movie <- function(self){\n    # select all movies not matching the specified genre\n    bonus_movies <- self$df[self$df$genre != self$genre, ]\n\n    idx <- sample(nrow(bonus_movies), size=1)\n    self$bonus <- bonus_movies$movie_title[idx]\n}\n\n#  Join our parallel branches and merge results.\njoin <- function(self, inputs){\n    # Reassign relevant variables from our branches.\n    self$bonus <- inputs$bonus_movie$bonus\n    self$playlist <- inputs$pick_movie$movies\n}\n\n# Print out the playlist and bonus movie.\nend <- function(self){\n    message("Playlist for movies in genre: ", self$genre)\n    for (i in 1:nrow(self$playlist)){\n        message(sprintf("Pick %d: %s", i, self$playlist$title[i]))\n\n        if (i > self$top_k) break;\n    }\n}\n\nmetaflow("PlayListFlow") %>%\n    parameter("genre",\n              help = "Filter movies for a particular genre.",\n              default = "Sci-Fi") %>%\n    parameter("top_k",\n              help = "The number of movies to recommend in the playlist.",\n              default = 5,\n              type = "int") %>%\n    step(step = "start",\n         r_function = start,\n         next_step = c("pick_movie", "bonus_movie")) %>%\n    step(step = "pick_movie",\n         r_function = pick_movie,\n         next_step = "join") %>%\n    step(step = "bonus_movie",\n         r_function = bonus_movie,\n         next_step = "join") %>%\n    step(step = "join",\n         r_function = join,\n         join = TRUE,\n         next_step = "end") %>%\n    step(step = "end",\n         r_function = end) %>%\n    run()\n')))}f.isMDXComponent=!0},3362:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/tutorial-episode-1-ac57119ee0fd8900c802d6e21f82953d.png"}}]);